!function(Q){var F={};function U(B){if(F[B])return F[B].exports;var n=F[B]={i:B,l:!1,exports:{}};return Q[B].call(n.exports,n,n.exports,U),n.l=!0,n.exports}U.m=Q,U.c=F,U.d=function(Q,F,B){U.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:B})},U.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},U.t=function(Q,F){if(1&F&&(Q=U(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(U.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var n in Q)U.d(B,n,function(F){return Q[F]}.bind(null,n));return B},U.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return U.d(F,"a",F),F},U.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},U.p="",U(U.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/lib/Container.js\nconst Container = (params = {}) => {\n  const {\n    isHidden\n  } = params;\n  const position = {\n    x: 0,\n    y: 0\n  };\n  let nodes = [];\n  let currentIsHidden = isHidden;\n\n  const setState = newState => {\n    const {\n      nodeToAdd,\n      nodeToRemove,\n      callbackToMap,\n      clear = false,\n      isHidden = false\n    } = newState;\n\n    if (nodeToAdd) {\n      nodes.push(nodeToAdd);\n    }\n\n    if (nodeToRemove) {\n      nodes = nodes.filter(node => node != nodeToRemove);\n      return nodeToRemove;\n    }\n\n    if (callbackToMap) {\n      nodes.map(callbackToMap);\n    }\n\n    if (clear) {\n      nodes = [];\n    }\n\n    if (isHidden !== undefined) {\n      currentIsHidden = isHidden;\n    }\n  };\n\n  const getState = () => {\n    return {\n      nodes,\n      position,\n      update,\n      isHidden: currentIsHidden\n    };\n  };\n\n  const update = (deltaTime, currentTime) => {\n    nodes = nodes.filter(node => {\n      const {\n        update,\n        isDead\n      } = node.getState();\n\n      if (update) {\n        update(deltaTime, currentTime);\n      }\n\n      if (isDead === undefined) return true;\n      return isDead ? false : true;\n    });\n  };\n\n  return Object.freeze({\n    setState,\n    getState\n  });\n};\n\n/* harmony default export */ var lib_Container = (Container);\n// CONCATENATED MODULE: ./src/utils/math.js\nfunction randomFloat(min, max) {\n  if (max === undefined) {\n    max = min;\n    min = 0;\n  }\n\n  return Math.random() * (max - min) + min;\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(randomFloat(min, max));\n}\n\nfunction randomOneIn(odds) {\n  return randomInt(odds) === 0;\n}\n\nfunction distance(positionObj1, positionObj2) {\n  const deltaX = positionObj1.x - positionObj2.x;\n  const deltaY = positionObj1.y - positionObj2.y; //a^2 + b^2 = c^2\n\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n}\n\nfunction clamp(val, min, max) {\n  return Math.max(min, Math.min(val, max));\n}\n\nfunction round(val) {\n  return Math.round(val);\n}\n\n\n// CONCATENATED MODULE: ./src/lib/CanvasRenderer.js\n\n\nconst CanvasRenderer = params => {\n  const {\n    width,\n    height\n  } = params;\n\n  if (!width || !height) {\n    console.error(`You must pass {width: \'your-game-width\', height: \'your-game-height\'} \n      into CanvasRenderer Constructor`);\n  }\n\n  const canvas = document.createElement("canvas");\n  canvas.width = width;\n  canvas.height = height;\n  const view = canvas;\n  const ctx = canvas.getContext("2d");\n\n  const render = (container, clear = true) => {\n    if (clear) ctx.clearRect(0, 0, width, height);\n    renderRecursive(container);\n\n    function renderRecursive(container) {\n      const {\n        nodes: parentContainerNodes\n      } = container.getState();\n      parentContainerNodes.forEach(node => {\n        const {\n          text = "",\n          texture,\n          tileWidth = 0,\n          tileHeight = 0,\n          frame = {\n            x: 0,\n            y: 0\n          },\n          nodes = [],\n          styles = {},\n          position = {\n            x: 0,\n            y: 0\n          },\n          scale = {\n            x: 1,\n            y: 1\n          },\n          rotation = 0,\n          pivot = {\n            x: 0,\n            y: 0\n          },\n          anchor = {\n            x: 0,\n            y: 0\n          },\n          isHidden = false\n        } = node.getState();\n        if (isHidden) return;\n        ctx.save();\n\n        if (position) {\n          const {\n            x,\n            y\n          } = position;\n          ctx.translate(round(x), round(y));\n        }\n\n        if (anchor) {\n          const {\n            x,\n            y\n          } = anchor;\n          ctx.translate(x, y);\n        }\n\n        if (scale) {\n          const {\n            x,\n            y\n          } = scale;\n          ctx.scale(x, y);\n        }\n\n        if (rotation) {\n          const {\n            x,\n            y\n          } = pivot;\n          ctx.translate(x, y);\n          ctx.rotate(rotation);\n          ctx.translate(-x, -y);\n        } //draw leaf nodes\n\n\n        if (text) {\n          const {\n            fill = "",\n            align = "",\n            font = ""\n          } = styles;\n          if (fill) ctx.fillStyle = fill;\n          if (align) ctx.textAlign = align;\n          if (font) ctx.font = font;\n          ctx.fillText(text, 0, 0);\n        }\n\n        if (tileWidth && tileHeight && frame && texture) {\n          const {\n            image\n          } = texture.getState();\n          ctx.drawImage(image, frame.x * tileWidth, frame.y * tileHeight, tileWidth, tileHeight, 0, 0, tileWidth, tileHeight);\n        } else if (texture) {\n          const {\n            image\n          } = texture.getState();\n          ctx.drawImage(image, 0, 0);\n        }\n\n        if (nodes.length != 0) {\n          renderRecursive(node);\n        }\n\n        ctx.restore();\n      });\n    }\n  };\n\n  const getState = () => {\n    return {\n      view,\n      render\n    };\n  };\n\n  return Object.freeze({\n    getState\n  });\n};\n\n/* harmony default export */ var lib_CanvasRenderer = (CanvasRenderer);\n// CONCATENATED MODULE: ./src/lib/Game.js\n\n\n\nconst Game = params => {\n  const {\n    width,\n    height,\n    parentElementIdentifier\n  } = params;\n  const scene = lib_Container();\n  const renderer = lib_CanvasRenderer({\n    width,\n    height\n  });\n  const {\n    view\n  } = renderer.getState();\n  document.querySelector(parentElementIdentifier).appendChild(view);\n  let deltaTime = 0;\n  let timeOfLastFrame = 0;\n\n  const run = (callback = () => {}) => {\n    requestAnimationFrame(loop);\n\n    function loop(ms) {\n      requestAnimationFrame(loop);\n      const currentTime = ms / 1000; //convert miliseconds to seconds\n\n      deltaTime = currentTime - timeOfLastFrame;\n      timeOfLastFrame = currentTime;\n      const {\n        update\n      } = scene.getState();\n      const {\n        render\n      } = renderer.getState();\n      update(deltaTime, currentTime);\n      callback(deltaTime, currentTime);\n      render(scene);\n    }\n  };\n\n  const add = nodeToAdd => {\n    scene.setState({\n      nodeToAdd\n    });\n  };\n\n  const remove = nodeToRemove => {\n    scene.setState({\n      nodeToRemove\n    });\n  };\n\n  const clearSceneGraph = () => {\n    scene.setState({\n      clear: true\n    });\n  };\n\n  return Object.freeze({\n    run,\n    add,\n    remove,\n    clearSceneGraph\n  });\n};\n\n/* harmony default export */ var lib_Game = (Game);\n// CONCATENATED MODULE: ./src/lib/Text.js\nconst Text = params => {\n  const {\n    //defaults\n    styles = {\n      fill: "#f1f0ee",\n      font: "20pt serif",\n      align: "center"\n    },\n    position = {\n      x: 0,\n      y: 0\n    },\n    isHidden = false\n  } = params;\n  let {\n    text: currentText = "this is placeholder text"\n  } = params;\n  let currentIsHidden = isHidden;\n\n  const setState = params => {\n    const {\n      text,\n      styles: newStyles = { ...styles\n      },\n      position: newPostion = {\n        x: position.x,\n        y: position.y\n      },\n      isHidden\n    } = params;\n    if (text) currentText = text;\n\n    if (!Object.entries(newStyles).length === 0) {\n      const {\n        fill = "",\n        align = "",\n        font = ""\n      } = newStyles;\n      if (fill) styles.fill = fill;\n      if (align) styles.align = align;\n      if (font) styles.font = font;\n    }\n\n    if (position.x !== undefined) position.x = newPostion.x;\n    if (position.y !== undefined) position.y = newPostion.y;\n\n    if (isHidden !== undefined) {\n      currentIsHidden = isHidden;\n      console.log(`currentIsHidden for ${currentText}`, currentIsHidden);\n    }\n  };\n\n  const getState = () => {\n    return {\n      text: currentText,\n      styles,\n      position,\n      isHidden: currentIsHidden\n    };\n  };\n\n  return Object.freeze({\n    setState,\n    getState\n  });\n};\n\n/* harmony default export */ var lib_Text = (Text);\n// CONCATENATED MODULE: ./src/lib/KeyboardControls.js\nconst KeyboardControls = () => {\n  const keys = {};\n  const keyCodes = {\n    leftArrow: 37,\n    upArrow: 38,\n    rightArrow: 39,\n    downArrow: 40,\n    aKey: 65,\n    dKey: 68,\n    wKey: 87,\n    sKey: 83,\n    spacebar: 32\n  };\n  document.addEventListener("keydown", handleKeyDown, false);\n  document.addEventListener("keyup", handleKeyUp, false);\n\n  function handleKeyUp(e) {\n    keys[e.which] = false;\n  }\n\n  function handleKeyDown(e) {\n    const {\n      leftArrow,\n      rightArrow,\n      upArrow,\n      downArrow\n    } = keyCodes;\n\n    if ([leftArrow, rightArrow, upArrow, downArrow].includes(e.which)) {\n      //prevent arrow keys from scrolling the page\n      e.preventDefault();\n    }\n\n    keys[e.which] = true;\n  }\n\n  function getState() {\n    const {\n      leftArrow,\n      rightArrow,\n      upArrow,\n      downArrow,\n      aKey,\n      dKey,\n      wKey,\n      sKey,\n      spacebar\n    } = keyCodes;\n    let inputVector = {\n      x: 0,\n      y: 0\n    };\n    let action = false;\n\n    if (keys[leftArrow] || keys[aKey]) {\n      inputVector.x = -1;\n    }\n\n    if (keys[upArrow] || keys[wKey]) {\n      inputVector.y = -1;\n    }\n\n    if (keys[rightArrow] || keys[dKey]) {\n      inputVector.x = 1;\n    }\n\n    if (keys[downArrow] || keys[sKey]) {\n      inputVector.y = 1;\n    }\n\n    if (keys[spacebar]) {\n      action = true;\n    }\n\n    return {\n      inputVector,\n      action\n    };\n  }\n\n  return Object.freeze({\n    getState\n  });\n};\n\n/* harmony default export */ var lib_KeyboardControls = (KeyboardControls);\n// CONCATENATED MODULE: ./src/lib/Texture.js\nconst Texture = params => {\n  const {\n    url = "./resources/place_holder.png"\n  } = params;\n  const image = document.createElement("img");\n  image.src = url;\n\n  const getState = () => {\n    return {\n      image\n    };\n  };\n\n  const setState = params => {\n    const {\n      url\n    } = params;\n    image.src = url;\n  };\n\n  return Object.freeze({\n    getState,\n    setState\n  });\n};\n\n/* harmony default export */ var lib_Texture = (Texture);\n// CONCATENATED MODULE: ./src/lib/Sprite.js\n\n\nconst Sprite = params => {\n  const {\n    textureUrl,\n    position = {\n      x: 0,\n      y: 0\n    },\n    anchor,\n    rotation,\n    pivot\n  } = params;\n  const currentPosition = position;\n  let texture = lib_Texture({\n    url: textureUrl\n  });\n\n  const getState = () => {\n    return {\n      texture,\n      position: currentPosition,\n      anchor,\n      rotation,\n      pivot\n    };\n  };\n\n  const setState = params => {\n    const {\n      textureUrl,\n      position\n    } = params;\n    if (textureUrl) texture = lib_Texture({\n      url: textureUrl\n    });\n    if (position.x !== undefined) currentPosition.x = position.x;\n    if (position.y !== undefined) currentPosition.y = position.y;\n  };\n\n  return Object.freeze({\n    getState,\n    setState\n  });\n};\n\n/* harmony default export */ var lib_Sprite = (Sprite);\n// CONCATENATED MODULE: ./src/entities/Bullet.js\n\n\nconst Bullet = params => {\n  const {\n    position,\n    movementConstraints\n  } = params;\n  const sprite = lib_Sprite({\n    textureUrl: "./resources/Bullet.png",\n    position\n  });\n  const speed = 400;\n  let currentIsDead = false;\n\n  const update = deltaTime => {\n    const {\n      position: currentPosition\n    } = sprite.getState();\n    let newX = currentPosition.x + speed * deltaTime;\n\n    if (newX > movementConstraints.x) {\n      console.log("dead bullet");\n      currentIsDead = true;\n    }\n\n    sprite.setState({\n      position: {\n        x: newX\n      }\n    });\n  };\n\n  const getState = () => {\n    const {\n      position,\n      texture\n    } = sprite.getState();\n    return {\n      position,\n      texture,\n      isDead: currentIsDead,\n      update\n    };\n  };\n\n  const setState = params => {\n    const {\n      isDead\n    } = params;\n\n    if (isDead) {\n      currentIsDead = isDead;\n    }\n  };\n\n  return Object.freeze({\n    getState,\n    setState\n  });\n};\n\n/* harmony default export */ var entities_Bullet = (Bullet);\n// CONCATENATED MODULE: ./src/entities/Spaceship.js\n\n\n\n\nconst Spaceship = params => {\n  const {\n    controls,\n    spawnPosition,\n    movementConstraints,\n    bulletContainer,\n    isHidden\n  } = params;\n  const sprite = lib_Sprite({\n    textureUrl: "./resources/Spaceship.png",\n    position: spawnPosition,\n    anchor: {\n      x: -16,\n      y: -16\n    }\n  });\n  const tileSize = 32;\n  const speed = 200;\n  const bulletFirePositionOffset = 12;\n  let currentIsHidden = isHidden;\n  let currentIsDead = false;\n  let timeOfLastBullet = 0;\n  let fireRate = 0.3;\n\n  const update = (deltaTime, currentTime) => {\n    const {\n      inputVector,\n      action\n    } = controls.getState();\n    const {\n      position: currentPosition\n    } = sprite.getState(); //handle movement\n\n    let newX = currentPosition.x + inputVector.x * speed * deltaTime;\n    let newY = currentPosition.y + inputVector.y * speed * deltaTime;\n    if (newX < 0) newX = 0;\n    if (newY < 0) newY = 0;\n\n    if (newX > movementConstraints.x - tileSize) {\n      newX = movementConstraints.x - tileSize;\n    }\n\n    if (newY > movementConstraints.y - tileSize) {\n      newY = movementConstraints.y - tileSize;\n    }\n\n    sprite.setState({\n      position: {\n        x: newX,\n        y: newY\n      }\n    }); //fire bullets\n\n    if (action && currentTime - timeOfLastBullet > fireRate) {\n      timeOfLastBullet = currentTime;\n      bulletContainer.setState({\n        nodeToAdd: entities_Bullet({\n          position: {\n            x: currentPosition.x + bulletFirePositionOffset,\n            y: currentPosition.y + bulletFirePositionOffset\n          },\n          movementConstraints\n        })\n      });\n    } else {}\n  };\n\n  const getState = () => {\n    const {\n      position,\n      texture\n    } = sprite.getState();\n    return {\n      position,\n      texture,\n      update,\n      isDead: currentIsDead,\n      isHidden: currentIsHidden\n    };\n  };\n\n  const setState = params => {\n    const {\n      isDead,\n      isHidden\n    } = params;\n\n    if (isDead) {\n      currentIsDead = isDead;\n    }\n\n    if (isHidden != undefined) {\n      currentIsHidden = isHidden;\n    }\n  };\n\n  return Object.freeze({\n    getState,\n    setState\n  });\n};\n\n/* harmony default export */ var entities_Spaceship = (Spaceship);\n// CONCATENATED MODULE: ./src/entities/Enemy.js\n\n\n\nconst Enemy = params => {\n  const {\n    spawnPosition,\n    speed = 500\n  } = params;\n  const sprite = lib_Sprite({\n    textureUrl: "./resources/Enemy.png",\n    position: spawnPosition,\n    anchor: {\n      x: -16,\n      y: -16\n    }\n  });\n  let currentIsDead = false;\n\n  const update = (deltaTime, currentTime) => {\n    const {\n      position\n    } = sprite.getState();\n    const newX = position.x - speed * deltaTime;\n    sprite.setState({\n      position: {\n        x: newX\n      }\n    });\n  };\n\n  const setState = params => {\n    const {\n      isDead\n    } = params;\n\n    if (isDead) {\n      currentIsDead = isDead;\n    }\n  };\n\n  const getState = () => {\n    const {\n      position,\n      texture\n    } = sprite.getState();\n    return {\n      texture,\n      update,\n      position,\n      isDead: currentIsDead\n    };\n  };\n\n  return Object.freeze({\n    getState,\n    setState\n  });\n};\n\n/* harmony default export */ var entities_Enemy = (Enemy);\n// CONCATENATED MODULE: ./src/entities/EnemySpawner.js\n\n\n\n\nconst EnemySpawner = params => {\n  const {\n    movementConstraints,\n    enemyContainer,\n    isHidden\n  } = params;\n  const enemySize = 32;\n  let spawnRate = 1; //seconds\n\n  let timeOfLastSpawn = 0;\n  let currentIsHidden = isHidden;\n\n  const update = (deltaTime, currentTime) => {\n    const {\n      update\n    } = enemyContainer.getState();\n    update(deltaTime, currentTime);\n\n    if (spawnRate < currentTime - timeOfLastSpawn) {\n      timeOfLastSpawn = currentTime;\n      enemyContainer.setState({\n        nodeToAdd: entities_Enemy({\n          spawnPosition: {\n            x: movementConstraints.x + enemySize,\n            y: randomInt(0, movementConstraints.y - enemySize)\n          },\n          speed: randomInt(20, 200)\n        })\n      });\n      spawnRate = spawnRate < 0.05 ? 0.6 : spawnRate * 0.97 + 0.001;\n    }\n\n    enemyContainer.setState({\n      callbackToMap: node => {\n        const {\n          position\n        } = node.getState();\n\n        if (position.x < 0 - enemySize) {\n          console.log("dead enemy");\n          node.setState({\n            isDead: true\n          });\n        }\n      }\n    });\n  };\n\n  const setState = params => {\n    const {\n      isHidden = false,\n      clear = false\n    } = params;\n    currentIsHidden = isHidden;\n\n    if (clear) {\n      enemyContainer.setState({\n        clear: true\n      });\n    }\n  };\n\n  const getState = () => {\n    const {\n      nodes\n    } = enemyContainer.getState();\n    return {\n      update,\n      nodes,\n      isHidden: currentIsHidden\n    };\n  };\n\n  return Object.freeze({\n    getState,\n    setState\n  });\n};\n\n/* harmony default export */ var entities_EnemySpawner = (EnemySpawner);\n// CONCATENATED MODULE: ./src/entities/Background.js\n\n\nconst Background = params => {\n  const {\n    position\n  } = params;\n  const sprite = lib_Sprite({\n    textureUrl: "./resources/Background.png",\n    position\n  });\n  const backgroundWidth = 640;\n  const scrollSpeed = 10;\n\n  const update = (deltaTime, currentTime) => {\n    const {\n      position\n    } = sprite.getState();\n\n    if (position.x <= -backgroundWidth) {\n      sprite.setState({\n        position: {\n          x: 0,\n          y: 0\n        }\n      });\n    } else {\n      sprite.setState({\n        position: {\n          x: position.x - scrollSpeed * deltaTime\n        }\n      });\n    }\n  };\n\n  const getState = () => {\n    const {\n      texture\n    } = sprite.getState();\n    return {\n      update,\n      position,\n      texture\n    };\n  };\n\n  return Object.freeze({\n    getState\n  });\n};\n\n/* harmony default export */ var entities_Background = (Background);\n// CONCATENATED MODULE: ./src/main.js\n\n\n\n\n\n\n\n\nconst WIDTH = 640;\nconst HEIGHT = 300;\nlet main_bulletContainer = null;\nlet main_enemyContainer = null;\nconst main_controls = lib_KeyboardControls();\nlet spaceship = null;\nlet score = lib_Text({\n  text: "Score: 0",\n  styles: {\n    fill: "#ff4d4d",\n    font: "20pt monospace",\n    align: "center"\n  },\n  position: {\n    x: WIDTH / 2,\n    y: 30\n  },\n  isHidden: true\n});\nlet enemySpawner = null;\nconst title = lib_Text({\n  text: "StarBox 63",\n  styles: {\n    fill: "#69deff",\n    font: "30pt monospace",\n    align: "center"\n  },\n  position: {\n    x: WIDTH / 2,\n    y: 50\n  },\n  isHidden: false\n});\nconst gameOverText = lib_Text({\n  text: "GAME OVER",\n  styles: {\n    fill: "#e55dac",\n    font: "50pt monospace",\n    align: "center"\n  },\n  position: {\n    x: WIDTH / 2,\n    y: HEIGHT / 2\n  },\n  isHidden: true\n});\nconst gameOverContinueText = lib_Text({\n  text: "Press spacebar to restart",\n  styles: {\n    fill: "#e55dac",\n    font: "15pt monospace",\n    align: "center"\n  },\n  position: {\n    x: WIDTH / 2,\n    y: 200\n  },\n  isHidden: true\n});\nconst background = entities_Background({\n  textureUrl: "./resources/Background.png",\n  position: {\n    x: 0,\n    y: 0\n  }\n});\nconst startGameMessage = lib_Text({\n  text: "Press spacebar to start",\n  styles: {\n    fill: "#33a5ff",\n    font: "15pt monospace",\n    align: "center"\n  },\n  position: {\n    x: WIDTH / 2,\n    y: 150\n  }\n});\nconst myGame = lib_Game({\n  width: WIDTH,\n  height: HEIGHT,\n  parentElementIdentifier: "#board"\n});\nlet scoreAmount = 0;\nlet gameState = "START_SCREEN";\nlet inputDelayTime = 3; //seconds\n\nlet delayTimeElapsed = 0;\nmyGame.run((deltaTime, currentTime) => {\n  if (gameState === "START_SCREEN") {\n    const {\n      action\n    } = main_controls.getState();\n\n    if (action) {\n      changeState("MAIN_GAME");\n    }\n  }\n\n  if (gameState === "GAME_OVER_SCREEN") {\n    if (deltaTime < inputDelayTime) delayTimeElapsed += deltaTime;\n    const {\n      action\n    } = main_controls.getState();\n\n    if (action && delayTimeElapsed > inputDelayTime) {\n      changeState("START_SCREEN");\n      delayTimeElapsed = 0;\n    }\n  }\n\n  if (gameState === "MAIN_GAME") {\n    checkForCollisions(deltaTime, currentTime);\n  }\n});\n\nfunction init(deltaTime, currentTime) {\n  myGame.clearSceneGraph();\n  scoreAmount = 0;\n  main_bulletContainer = lib_Container({\n    isHidden: true\n  });\n  main_enemyContainer = lib_Container();\n  spaceship = entities_Spaceship({\n    spawnPosition: {\n      x: 150,\n      y: HEIGHT / 2\n    },\n    controls: main_controls,\n    bulletContainer: main_bulletContainer,\n    movementConstraints: {\n      x: WIDTH,\n      y: HEIGHT\n    },\n    isHidden: true\n  });\n  enemySpawner = entities_EnemySpawner({\n    movementConstraints: {\n      x: WIDTH,\n      y: HEIGHT\n    },\n    enemyContainer: main_enemyContainer,\n    isHidden: true\n  });\n  myGame.add(background);\n  myGame.add(enemySpawner);\n  myGame.add(spaceship);\n  myGame.add(main_bulletContainer);\n  myGame.add(title);\n  myGame.add(startGameMessage);\n  myGame.add(gameOverContinueText);\n  myGame.add(gameOverText);\n  myGame.add(score);\n}\n\nfunction changeState(newState) {\n  if (newState === "START_SCREEN") {\n    gameOverContinueText.setState({\n      isHidden: true\n    });\n    gameOverText.setState({\n      isHidden: true\n    });\n    score.setState({\n      text: "Score: 0"\n    });\n    init();\n    gameState = newState;\n  }\n\n  if (newState === "MAIN_GAME") {\n    gameState = newState;\n    title.setState({\n      isHidden: true\n    });\n    startGameMessage.setState({\n      isHidden: true\n    });\n    spaceship.setState({\n      isHidden: false\n    });\n    main_bulletContainer.setState({\n      isHidden: false,\n      clear: true\n    });\n    enemySpawner.setState({\n      isHidden: false,\n      clear: true\n    });\n    score.setState({\n      isHidden: false\n    });\n    console.log(score.getState());\n  }\n\n  if (newState === "GAME_OVER_SCREEN") {\n    gameOverText.setState({\n      isHidden: false\n    });\n    gameOverContinueText.setState({\n      isHidden: false\n    });\n    gameState = newState;\n  }\n}\n\nfunction checkForCollisions(deltaTime, currentTime) {\n  const {\n    nodes: bullets\n  } = main_bulletContainer.getState();\n  const {\n    nodes: enemies\n  } = enemySpawner.getState();\n  enemies.map(enemy => {\n    bullets.map(bullet => {\n      const {\n        position: bulletPosition\n      } = bullet.getState();\n      const {\n        position: enemyPosition\n      } = enemy.getState();\n\n      if (distance(bulletPosition, enemyPosition) < 24) {\n        bullet.setState({\n          isDead: true\n        });\n        enemy.setState({\n          isDead: true\n        });\n        scoreAmount += Math.round(currentTime);\n        score.setState({\n          text: `Score: ${scoreAmount}`\n        });\n      }\n    });\n    const {\n      position: enemyPosition\n    } = enemy.getState();\n    const {\n      position: spaceshipPosition,\n      isDead: isDeadSpaceship\n    } = spaceship.getState(); //detect game over\n\n    if (isDeadSpaceship) return;\n\n    if (distance(enemyPosition, spaceshipPosition) < 32) {\n      enemy.setState({\n        isDead: true\n      });\n      spaceship.setState({\n        isDead: true\n      });\n      changeState("GAME_OVER_SCREEN");\n    }\n  });\n}\n\ninit();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);